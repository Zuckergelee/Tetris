export const GAMEFIELD_ROWS = 20;
export const GAMEFIELD_COLUMNS = 10;
// Литералы соответствуют фигуркам тетриса
export const TETROMINO_NAMES = ["T", "S", "Z", "O", "J", "L", "I"];
// Объект, в котором название каждой фигуры соответствует матрице фигуры (т.е. двухмерному массиву)
export const TETROMINOES = {
  T: [
    [0, 1, 0],
    [1, 1, 1],
    [0, 0, 0],
  ],
  S: [
    [0, 1, 1],
    [1, 1, 0],
    [0, 0, 0],
  ],
  Z: [
    [1, 1, 0],
    [0, 1, 1],
    [0, 0, 0],
  ],
  O: [
    [1, 1],
    [1, 1],
  ],
  J: [
    [1, 0, 0],
    [1, 1, 1],
    [0, 0, 0],
  ],
  L: [
    [0, 0, 1],
    [1, 1, 1],
    [0, 0, 0],
  ],
  I: [
    [0, 0, 0, 0],
    [1, 1, 1, 1],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
  ],
};
export const score = document.getElementById("score");
// Функция принимает массив и возвращает его случайный элемент
export function getRandomEl(array) {
  // Таким образом получаем случайное число от 0 до 1, не включая 1, умноженную на длину массива; после получаем случайное число от 0 до длины массива, не включая длину массива, и отсекаем дробную часть;
  // в итоге будет индекс случайного элемента от 0 до последнего
  const randomInd = Math.floor(Math.random() * array.length);
  // Возвращаем случайный элемент массива
  return array[randomInd];
}
// Функция принимает строку и столбец и конвертирует индекс плитки фигуры из матрицы в индекс ячейки в списке div-элементов
export function convertIndexToIndex(row, column) {
  // В каждой строке 10 столбцов от 1 до 10, поэтому для получения индекса row умножаем на GAMEFIELD_COLUMNS и в конце + column
  return row * GAMEFIELD_COLUMNS + column;
}
// Аргумент функции - матрица, результат - новая матрица, повернутая на 90 градусов
export function rotateMatrix(matrix) {
  // Сперва сохраняем размер матрицы в Size
  const size = matrix.length;
  // Создаем пустой массив для новой матрицы
  const rotatedMatrix = [];
  // Используем двойной цикл, чтобы перебрать все элементы матрицы
  for (let i = 0; i < size; i++) {
    // Перебирая строки, в новую матрицу добавляем пустой массив для новой строки
    rotatedMatrix[i] = [];
    for (let j = 0; j < size; j++) {
      // Важно: [i][j]-элемент новой матрицы будет равен элементу [size-j-1][i] старой матрицы
      rotatedMatrix[i][j] = matrix[size - j - 1][i];
    }
  }
  // Возвращаем в конце новую матрицу
  return rotatedMatrix;
}
